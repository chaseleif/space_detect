/* screenshots.ssc
** Stellarium script to get screenshots of the sky with satellites
*/

/**
** User-defined variables
*/
// number of images generated = floor(hours*3600/tickrate)
// the length of time to collect images for:
const hours = 0;
const minutes = 1;
const seconds = 0;
// ticks per second or seconds per tick
const tickpersec = 32;
const secpertick = 1/tickpersec;
/*
const secpertick = 2;
const tickpersec = 1/secpertick;
*/
// set a static start time for reproducability
const date = "2024-02-29T12:00:00";
// set the savepath
// use the environment variable "STELLARIUM_OUTPUTDIR"
// or add your own path by replacing "/my/save/path"
//  (uncomment the commented out line and insert your own path)
const savepath =  (core.getEnv("STELLARIUM_OUTPUTDIR") != "") ?
                  core.getEnv("STELLARIUM_OUTPUTDIR") :
//                  (true) ? "/my/save/path" :
                  null;

/*
** Utility functions
*/
// function to print a line to the screen and pause for a duration
function print(str, duration=1) {
  str = str.split('\n');
  for (let i=0;i<str.length;++i) {
    LabelMgr.labelScreen(str[i],200,200+i*30,true,20,"#00ff00");
  }
  core.wait(duration);
  LabelMgr.deleteAllLabels();
}

// function to comma separate and toString a list of vars
function cat() {
  let str = "";
  for (let i=0;i<arguments.length;++i) {
    if (i>0) str += ", ";
    if (typeof arguments[i] !== "undefined")
      str += arguments[i].toString();
    else str += "undefined";
  }
  return str;
}

// print information about the current location
function printlocation() {
  const loc = core.getObserverLocationInfo();
  print(cat("latitude, longitude: " + loc.longitude, loc.latitude +
            "\naltitude: " + loc.altitude, "location: " + loc.location +
            "\nplanet: " + loc.planet),
        duration=3);
}

/*
** Prepare to enter screenshot loop
*/
// check the savepath, we can't continue without a valid path
if (savepath == null) {
  print("ERROR: " +
        "Set output directory in script or variable STELLARIUM_OUTPUTDIR",
        duration=10);
  core.quitStellarium();
}

// the tick stop: number of seconds multiplied by the ticks per second
const tickstop = (seconds + minutes*60 + hours*3600)*tickpersec;

// hide the landscape
LandscapeMgr.setFlagLandscape(false);
LandscapeMgr.setFlagAtmosphere(false);
LandscapeMgr.setFlagFog(false);
LandscapeMgr.setFlagCardinalPoints(false);

// turn off special markers
SpecialMarkersMgr.setFlagCompassMarks(false);
SpecialMarkersMgr.setFlagFOVRectangularMarker(false);
SpecialMarkersMgr.setFlagFOVCircularMarker(false);
MeteorShowers.setEnableMarker(false);
MeteorShowers.setEnableLabels(false);
SolarSystem.setFlagLabels(false);
GridLinesMgr.setFlagGridlines(false);
StarMgr.setLabelsAmount(0);

// turn off the gui
core.setGuiVisible(false);

// turn on satellites
Satellites.setFlagHintsVisible(true);
// turn on satellite markers
Satellites.setFlagIconicMode(true);

// set the type of viewport
core.setProjectionMode("ProjectionPerspective");
//core.setProjectionMode("ProjectionStereographic");

// toggle the mount mode between equatorial and altazimuthal
StelMovementMgr.toggleMountMode();

// Freeze time at the start date+time
core.setTimeRate(0);
core.setDate(date)
//printlocation();

// Set the location to San Marcos, Tx
core.setObserverLocation(-97.911530, 29.890661, 300000, 0, "San Marcos (Texas)");

// Select the International Space Station
//core.selectObjectByName("ISS (ZARYA)");
//const ISS = core.getSelectedObjectInfo();
// Move the observer to the ISS - (long, lat, alt, duration, name, planet)
// ~ ecliptic coordinates (Earth only)
//core.setObserverLocation(ISS.elong, ISS.elat, ISS.altitude, 0, "ISS");
// Allow the ISS to move away from our location for 1 second
//core.setTimeRate(1);
//core.wait(1);
// Move the camera to point to (location does not "move"), duration=0
//core.moveToSelectedObject(0);
// reset the date
//core.setTimeRate(0);
//core.setDate(date)
//printlocation();

// zoomTo(double aimFov, float zoomDuration) - change the zoom level
StelMovementMgr.zoomTo(10, 0);

// Once the screenshots start capturing it will capture the script window
//  show a starting message and give time to close the script window
print("Saving screenshots to directory " + savepath +
      "\nStarting - (close the script window) . . .", duration=6);

// start the clock at our tickrate
core.setTimeRate(secpertick);

// Fixed position, advance time and get some screenshots
for (let tick=0;tick<tickstop;++tick) {
  // screenshot(prefix,invert,dir,overwrite,format)
  // invert->colors ; overwrite means only "prefix.format"
  core.screenshot("img", false, savepath, false, "png");
  core.wait(1);
}

print("Screenshot script finished successfully", duration=5);
core.quitStellarium();

// vim: syntax=javascript
