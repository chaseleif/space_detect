/* screenshots.ssc
  Stellarium script to get screenshots of the sky with satellites
*/

// the number of hours worth of images to collect: hours >= 1
const hours = 1;
// set a static start time for reproducability
core.setDate("2024-02-29T12:00:00")
// seconds per tick: 3600 >= tickrate >= 1
const tickrate = 1;
core.setTimeRate(tickrate);

// function to print a line to the screen and pause for a duration
function print(str, duration=1) {
  LabelMgr.labelScreen(str,200,200,true,20,"#00ff00");
  core.wait(duration);
  LabelMgr.deleteAllLabels();
}

// function to comma separate and toString a list of vars
function cat() {
  let str = "";
  for (let i=0;i<arguments.length;++i) {
    if (i>0) str += ", ";
    if (typeof arguments[i] !== "undefined")
      str += arguments[i].toString();
    else str += "undefined";
  }
  return str;
}

// print information about the current location
function printlocation() {
  const loc = core.getObserverLocationInfo();
  print(cat("latitude, longitude: "+loc.longitude,loc.latitude,
            "\naltitude: "+loc.altitude,"planet: "+loc.planet,
            "\nlocation: "+loc.location), duration=3);
}

// number of [tickrate] in an hour
const ticks2hour = Math.floor(3600/tickrate)
// tickrate should divide an hour (60*60 seconds)
if (3600%tickrate != 0) {
  print("WARNING: "+cat(tickrate)+" doesn\'t divide 3600", duration=2);
}

// hide the landscape
LandscapeMgr.setFlagLandscape(false);
LandscapeMgr.setFlagAtmosphere(false);
LandscapeMgr.setFlagFog(false);
LandscapeMgr.setFlagCardinalPoints(false);

// turn off special markers
SpecialMarkersMgr.setFlagCompassMarks(false);
SpecialMarkersMgr.setFlagFOVRectangularMarker(false);
SpecialMarkersMgr.setFlagFOVCircularMarker(false);
MeteorShowers.setEnableMarker(false);
MeteorShowers.setEnableLabels(false);
SolarSystem.setFlagLabels(false);
GridLinesMgr.setFlagGridlines(false);
StarMgr.setLabelsAmount(0);

// turn off the gui
core.setGuiVisible(false);

// turn on satellites
Satellites.setFlagHintsVisible(true);

// set the type of viewport
core.setProjectionMode("ProjectionPerspective");
//core.setProjectionMode("ProjectionStereographic");

// toggle the mount mode between equatorial and altazimuthal
StelMovementMgr.toggleMountMode();

// zoomTo(double aimFov, float zoomDuration) - change the zoom level
//StelMovementMgr.zoomTo(10, 0);

printlocation();

// Select the International Space Station
core.selectObjectByName("ISS (ZARYA)");
const ISS = core.getSelectedObjectInfo();

// Move the observer to the ISS - (long, lat, alt, duration, name, planet)
// ~ galactic coordinates
//core.setObserverLocation(ISS.glong, ISS.glat, ISS.altitude, 0, "ISS");
// ~ ecliptic coordinates (Earth only)
//core.setObserverLocation(ISS.elong, ISS.elat, ISS.altitude, 0, "ISS");
// ~ ecliptic coordinates (Earth's J2000 frame)
core.setObserverLocation(ISS.elong, ISS.elat, ISS.altitude, 0, "ISS");

// Allow the ISS to move away from our location
core.wait(2);
// Move the camera to point to (location does not "move"), duration=0
core.moveToSelectedObject(0);

printlocation();

// set the savepath
// use the environment variable "STELLARIUM_OUTPUTDIR"
// or add your own path, replace "/my/save/path"
//  uncomment the commented out line and replace with your own path
const savepath =  (core.getEnv("STELLARIUM_OUTPUTDIR") != "") ?
                  core.getEnv("STELLARIUM_OUTPUTDIR") :
                  (core.getEnv("USER") === "chaseleif") ?
                  core.getEnv("HOME") + "/git/space_detect/data" :
//                  (true) ? "/my/save/path" :
                  null;
if (savepath == null) {
  print("ERROR: " +
        "Set output directory in script or variable STELLARIUM_OUTPUTDIR",
        duration=10);
  core.exit();
}

// Once the screenshots start capturing it will capture the script window
//  show a starting message and give time to close the script window
print("Saving screenshots to directory "+savepath, duration=3);
print("Starting - (close the script window) . . .", duration=3);

// Fixed position, advance time and get some screenshots
for (let hour=0;hour<hours;++hour) {
  for (let tick=0;tick<3600;tick+=tickrate) {
    // screenshot(prefix,invert,dir,overwrite,format)
    // invert->colors ; overwrite means only "prefix.format"
    core.screenshot("check", false, savepath, false, "png");
    core.wait(1);
    // early break for now
    if (tick==500) break;
  }
  // early break
  break;
}
print("Screenshot scripts finished", duration=5);

// vim: syntax=javascript
